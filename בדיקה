import pandas as pd



class Dal:
    def __init__(self):
        self.data_table = None
        self.data_table_read = None


    def which_data(self):
        data = input("enter the url of your data thet you want to work with")
        return data

    def read_the_csv_to_df(self,the_csv_file=r"C:\Users\User\Downloads\buy_computer_data.csv"):
        if the_csv_file is None:
            the_csv_file = self.which_data()
        self.data_table_read = pd.read_csv(the_csv_file)
        # print(self.data_table_read)
        self.data_table = pd.DataFrame(self.data_table_read)
        print("Available columns:", self.data_table)

        return self.data_table
 # = r"C:\Users\User\Downloads\phishing.csv"
r"C:\Users\User\Downloads\buy_computer_data.csv"



~~

class clean_data:
    def __init__(self,data_table):
        self.data_table = data_table
        self.score_of_test = None
        self.train_set = None
        self.test_set = None
        self.test_set_cut = None

    def remove_none(self):
        self.data_table = self.data_table.dropna()
        return self.data_table

    def cat_data(self):
        index,column = self.data_table.shape
        end = int(index*70/100)
        self.train_set = self.data_table.iloc[:end]
        self.test_set = self.data_table.iloc[end:]
        return self.train_set,self.test_set

    def chaing_data_from_test_to_check(self, data_to_check):
        # לבדוק שהעמודה האחרונה היא עמודת התשובה
        label_column = self.data_table.columns[-1]
        self.test_set_cut = data_to_check.drop(columns=[label_column])
        return self.test_set_cut

    def chaing_from_df_to_dict(self,data):
        self.test_set = data.to_dict(orient='records')
        return self.test_set


    def run_all(self):
        data_to_train,data_to_test = self.cat_data()#את data_to_test צריך לשלוח לבדיקה כמה אחוזים היא הצליחה ועוד עותק להוריד את השורה של התשובה ולשלוח לטסטים
        data_to_score = self.chaing_data_from_test_to_check(data_to_test)
        data_to_test = self.chaing_from_df_to_dict(data_to_test)
        data_to_score = self.chaing_from_df_to_dict(data_to_score)
        return data_to_train ,data_to_test ,data_to_score



~~

class train_a_model:
    def __init__(self,data_table):
        self.dict_result = {}
        self.data_table = data_table


    def choose_which_column(self):
        column = input("choose which column").strip().strip('"').strip("'")
        return column

    def check_statistics(self,column):
        # self.column = self.choose_which_column()
        data_table_grouped = self.data_table.groupby(column)

        for name_uniq, dfuniq in data_table_grouped:
            self.dict_result[name_uniq] = {}

            for colume in self.data_table.columns:
                if colume == column:
                    continue
                else:
                    count = dfuniq[colume].value_counts(normalize=True).to_dict()
                    self.dict_result[name_uniq][colume] = count

        return self.dict_result,column



~~
import math

class Check_data:

    def __init__(self,dict_result1,col):
        self.dict_result = dict_result1
        self.list = []
        self.column = col


    def tests(self,to_check):
        dict_probability = {}

        for group, group_dict in self.dict_result.items():
            log_sum = 0
            for dic, parm in to_check.items():
                prob = group_dict.get(dic, {}).get(parm, 1e-10)
                if prob == 0:
                    prob = 1e-10

                log_sum += math.log(prob)

            dict_probability[group] = log_sum

        best_group = max(dict_probability, key=dict_probability.get)
        best_prob = dict_probability[best_group]

        return   best_group, best_prob

    def check_all_data(self, dic_all_data):
        self.true_labels = []
        for dic in dic_all_data:
            true_label = dic.get(self.column)
            self.true_labels.append(true_label)
            ret = self.tests(dic)
            self.list.append(ret)
        return self.list

    def test_whe_mach_corectly(self):
        correct = 0
        total = len(self.list)

        for i in range(total):
            predicted_label = self.list[i][0]
            true_label = self.true_labels[i]

            if predicted_label == true_label:
                correct += 1

        accuracy = correct / total
        return accuracy


~~

from controler import controler
import uvicorn
from fastapi import FastAPI

app = FastAPI()

@app.get("/")
def enter_page():
    p = "welcome to the naivi baice project !"
    return p,which_column()

@app.get("/column")
def which_column(column:str):
    controler1.cuntinue(column)
    return

@app.get("/params")
def chose_whet_param(choose:int):
    controler1.chose_whet_param(choose)
    return

@app.get("/readCsv")
def get_csv_file(path: str = r"C:\Users\User\Downloads\buy_computer_data.csv"):
    return {"index of data": path}

@app.get("/parm")
def get_parm_to_check():
    pass

@app.get("/dfprediction")
def prediction_to_df():
    pass

@app.get("/predict_all")
def full_prediction(
    column: str,
    choose: int,
    params:dict
    # age: str,
    # income: str,
    # student: str,
    # credit_rating: str
):
    controler1.cuntinue(column)
    controler1.chose_whet_param(choose)
    # params = {
        # 'age': age,
        # 'income': income,
        # 'student': student,
        # 'credit_rating': credit_rating
    # }
    prediction = controler1.check_data.tests(params)
    return {"full_prediction": prediction}



if __name__ == "__main__":
    controler1 = controler()
    uvicorn.run("server:app", host="127.0.0.1", port=8000, reload=True)
    print(controler1)


~~~~

import requests


BASE_URL = "http://127.0.0.1:8000"

param_to_test = input({'age': ">40", 'income': "medium", 'student': "yes", 'credit_rating': "fair"})

def choose_column():
    response = requests.get(f"{BASE_URL}/column",params=input("the column"))
    print(response.json())

def send_param():
    response = requests.get(f"{BASE_URL}/parm",params=param_to_test)
    print(response.json())

def read_csv():
    data = None
    return data

def send_data():
    response = requests.post(f"{BASE_URL}/readCsv",json=read_csv())
    response = response.json()
    print(response.json())

def choose_what():
    response = requests.get(f"{BASE_URL}/params",params=int(input("your choose")))
    print(response.json())

def prediction():
   response = requests.get(f"{BASE_URL}/ dfprediction",params=dict)
   print(response.json())



def all_p():
    response = requests.post(f"{BASE_URL}/predict_all",data= {"buys_computer",1,{'age': '>40', 'income': 'medium', 'student': 'yes', 'credit_rating': 'fair'}})
    print(response.json())


if __name__ == "main":
    all_p()